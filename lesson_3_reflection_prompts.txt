When would you want to use a remote repository rather than keeping all your work
local?

    It makes sense to store your code and data on the cloud in order to collaborate with others working on the project with you. It also works makes sense to store your data on a cloud for safekeeping away from coffee spills or aging hardware issues. The remote repository allows you to track progess as a collective team in addition to the changes each commit makes.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    It would be grossly inefficient to continually recieve updates even when they are not requested.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks: is basically like cloning except it is done entirely on GitHub. Its applied best when you would like to share someone's repository without bothering them with changes to their work, applicable is situations where you would like to experiment your own version of the repository
    Clone: is when you copy a repository onto your local machine to code or develop as you please. This copies the entire repository onto your local machine. This allows you to edit and develop the repository as you please, you may even make an entirely new repository based on the clone. You can clone a Fork as well onto your computer but the main difference between Forking and Cloning are the fact that you copy the repository onto your local machine when you Clone whereas you simply copy the repository onto your GitHub repository when you fork.
    Branch: A branch is simply an edit from the production level code or a version of the code different from the master. Like the easy-mode of the astorids game, or if we made an Italian version of the game or something different with the code that is not production ready or is different from the master branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows you to make updates to the code without requiring to be online.
    It also provides a reference point for you to have an idea how far you've gone since you made your last push to the GitHub Repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I wish I was asked this question before I stared learning about GitHub, I really can't think of a good answer to how it would be easier WITHOUT Git.
    The benefits are self evident, it provides a central place to store and collaborate on code, while allowing flexibility to develop and track changes.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.

    Its best to work on changes on the production code on a seperate branch even on the local Repository, because this allows you to merge it with the current master and continue making changes as desired, even if other updates become relevent before your changes in the branch are complete you can always merge the updated master into your changing branch and continue. When you feel that your changes are complete and might be ready for production code or the master branch. You may simply send a pull request to the collaborators to review and merge the changes into the master. This allows everyone participating to be involved, track and participate in the production quality master code.
